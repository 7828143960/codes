pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '133673781875'
        ECR_IMAGE_TAG = 'latest'
        AWS_CREDENTIALS_ID = 'vishal-aws-creds' // This should be AWS credentials type
        GIT_CREDENTIALS_ID = 'shreya-github-id'
        GIT_REPO_URL = 'https://github.com/7828143960/shreya_private.git'
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose action to apply or destroy infrastructure')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'snaatak-Jenkinsfile', credentialsId: "${env.GIT_CREDENTIALS_ID}", url: "${env.GIT_REPO_URL}"
            }
        }

        stage('Terraform Fmt') {
            steps {
                script {
                    sh """
                        cd Terraform
                        terraform fmt -check -diff
                    """
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                script {
                    sh """
                        cd Terraform
                        terraform validate
                    """
                }
            }
        }

        stage('Terraform Init and Plan') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Terraform
                            terraform init
                            terraform plan -var aws_region=${env.AWS_REGION} -out=tfplan
                        """
                    }
                }
            }
        }

        stage('Terraform Apply or Destroy') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Terraform
                            if [ "${params.ACTION}" == "apply" ]; then
                                terraform apply -auto-approve tfplan
                            else
                                terraform destroy -auto-approve
                            fi
                        """
                    }
                }
            }
        }

        stage('Retrieve Terraform Outputs') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def terraformOutputs = sh(script: 'cd Terraform && terraform output -json', returnStdout: true).trim()
                    def outputs = readJSON(text: terraformOutputs)
                    env.EKS_CLUSTER_NAME = outputs.eks_cluster_name.value
                    env.ECR_REPOSITORY_URL = outputs.ecr_repository_url.value
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def appImage = docker.build("${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}", "-f Python/Dockerfile .")
                }
            }
        }

        stage('Login to ECR') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPOSITORY_URL}
                        """
                    }
                }
            }
        }

        stage('Push Image to ECR') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    sh """
                        docker tag ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG} ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}
                        docker push ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.EKS_CLUSTER_NAME}
                            kubectl apply -f Python/deployment.yaml
                            kubectl apply -f Python/service.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
