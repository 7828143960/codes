pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '133673781875'
        ECR_REPO_NAME = 'hello-flask'
        ECR_IMAGE_TAG = 'latest'
        AWS_CREDENTIALS_ID = 'vishal-aws-creds' // This should be AWS credentials type
        GIT_CREDENTIALS_ID = 'shreya-github-id'
        GIT_REPO_URL = 'https://github.com/7828143960/shreya_private.git'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'snaatak-Jenkinsfile', credentialsId: "${env.GIT_CREDENTIALS_ID}", url: "${env.GIT_REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Specify the path to the Dockerfile
                    def appImage = docker.build("${env.ECR_REPO_NAME}:${env.ECR_IMAGE_TAG}", "-f Jenkinsfile/Python/Dockerfile .")
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com
                        """
                    }
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    sh """
                        docker tag ${env.ECR_REPO_NAME}:${env.ECR_IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPO_NAME}:${env.ECR_IMAGE_TAG}
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPO_NAME}:${env.ECR_IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws eks update-kubeconfig --region ${env.AWS_REGION} --name my-k8s-cluster
                            kubectl apply -f Jenkinsfile/Python/deployment.yaml
                            kubectl apply -f Jenkinsfile/Python/service.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
