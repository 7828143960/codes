pipeline {
    agent any

    environment {
        AWS_REGION = 'eu-north-1'
        AWS_ACCOUNT_ID = '133673781875'
        ECR_IMAGE_TAG = 'latest'
        ECR_REPOSITORY_URL = ''  // Default value; will be updated in Retrieve Terraform Outputs
        AWS_CREDENTIALS_ID = 'vishal-aws-creds'
        GIT_CREDENTIALS_ID = 'shreya-github-id'
        GIT_REPO_URL = 'https://github.com/7828143960/shreya_private.git'
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose action to apply or destroy infrastructure')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'snaatak-Jenkinsfile', credentialsId: "${env.GIT_CREDENTIALS_ID}", url: "${env.GIT_REPO_URL}"
            }
        }

        stage('Terraform Init') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Jenkinsfile/Terraform
                            terraform init
                        """
                    }
                }
            }
        }

        stage('Terraform Fmt') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    sh """
                        cd Jenkinsfile/Terraform
                        terraform fmt
                    """
                }
            }
        }

        stage('Terraform Validate') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    sh """
                        cd Jenkinsfile/Terraform
                        terraform validate
                    """
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Jenkinsfile/Terraform
                            terraform plan
                        """
                    }
                }
            }
        }

        stage('Clean ECR Images') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws ecr list-images --repository-name my-ecr-repo --region ${env.AWS_REGION} | grep 'imageId' | sed 's/[^"]*"\([^"]*\)".*/\\1/' | while read imageTag; do
                                aws ecr batch-delete-image --repository-name my-ecr-repo --image-ids imageTag=${imageTag} --region ${env.AWS_REGION}
                            done
                        """
                    }
                }
            }
        }

        stage('Apply Terraform') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    input message: 'Do you want to apply Terraform changes?', ok: 'Apply'
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Jenkinsfile/Terraform
                            terraform apply --auto-approve
                        """
                    }
                }
            }
        }

        stage('Destroy Terraform') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    input message: 'Do you want to destroy Terraform resources?', ok: 'Destroy'
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            cd Jenkinsfile/Terraform
                            terraform destroy --auto-approve
                        """
                    }
                }
            }
        }

        stage('Retrieve Terraform Outputs') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def terraformOutputs = sh(script: 'cd Jenkinsfile/Terraform && terraform output -json', returnStdout: true).trim()
                    def outputs = readJSON(text: terraformOutputs)
                    env.EKS_CLUSTER_NAME = outputs?.eks_cluster_name?.value
                    env.ECR_REPOSITORY_URL = outputs?.ecr_repository_url?.value ?: "${env.ECR_REPOSITORY_URL}"
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    docker.build("${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}", "-f Jenkinsfile/Python/Dockerfile .")
                }
            }
        }

        stage('Login to ECR') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPOSITORY_URL}
                        """
                    }
                }
            }
        }

        stage('Push Image to ECR') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    sh """
                        docker tag ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG} ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}
                        docker push ${env.ECR_REPOSITORY_URL}:${env.ECR_IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
                        sh """
                            aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.EKS_CLUSTER_NAME}
                            kubectl apply -f Jenkinsfile/Python/deployment.yaml
                            kubectl apply -f Jenkinsfile/Python/service.yaml
                        """
                    }
                }
            }
        }
    }
}
